CREATE TABLE CASA_DISCOGRAFICA(
	nome VARCHAR(30) PRIMARY KEY,
	anno_fondazione INTEGER NOT NULL

);


CREATE TABLE BAND(
	cod_band INTEGER PRIMARY KEY,
	nome VARCHAR(30) NOT NULL,
	data_fondazione date NOT NULL,
	nome_c VARCHAR(30) NOT NULL,
	FOREIGN KEY (nome_c) REFERENCES CASA_DISCOGRAFICA(nome)
	ON DELETE CASCADE ON UPDATE CASCADE

);

CREATE TABLE STUDIO_DI_REGISTRAZIONE(
	nome VARCHAR(30) NOT NULL,
	via VARCHAR(60) NOT NULL,
	cap CHAR(5) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	num_civico INTEGER NOT NULL,
	provincia VARCHAR(60) NOT NULL,
	PRIMARY KEY(nome,citta),

	CHECK(num_civico > 0 )
);

CREATE TABLE CD_MUSICALE(
	nome VARCHAR(60) NOT NULL,
	cod_band INTEGER NOT NULL,
	nome_studio VARCHAR(60) NOT NULL,
	prezzo_cad INTEGER NOT NULL, 
	durata TIME NOT NULL,
	num_brani INTEGER NOT NULL,
	costo_reg DECIMAL(10,3) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	PRIMARY KEY(nome, cod_band),
	FOREIGN KEY (nome_studio, citta) REFERENCES STUDIO_DI_REGISTRAZIONE(nome, citta)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_band) REFERENCES BAND(cod_band)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(prezzo_cad > 0),
	CHECK(durata > '00:02:00' ),
	CHECK(num_brani > 0)
	

);


CREATE TABLE GENERE_MUSICALE(
	nome VARCHAR(60) PRIMARY KEY,
	popolarita INTEGER NOT NULL,
	CHECK(popolarita > 1500)
	

);

CREATE TABLE ADESIONE(
	genere VARCHAR(60) NOT NULL,
	cod_band INTEGER NOT NULL,
	nome_cd VARCHAR(60) NOT NULL,
	PRIMARY KEY(genere, cod_band, nome_cd),
	
	FOREIGN KEY (nome_cd, cod_band) REFERENCES CD_MUSICALE(nome, cod_band)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (genere) REFERENCES GENERE_MUSICALE(nome)
	ON DELETE CASCADE ON UPDATE CASCADE
	

);


CREATE TABLE MAGAZZINO(
	cod_m INTEGER PRIMARY KEY,
	via VARCHAR(60) NOT NULL,
	cap CHAR(5) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	num_civico INTEGER NOT NULL,
	provincia VARCHAR(60) NOT NULL,
	
	CHECK(num_civico > 0 )
	
);


CREATE TABLE DIRIGENTE(
	cf CHAR(16) PRIMARY KEY,
	nome VARCHAR(60) NOT NULL,
	cognome VARCHAR(60) NOT NULL,
	costo_orario DECIMAL(10,3) NOT NULL,
	telefono VARCHAR(10),
	via VARCHAR(60) NOT NULL,
	cap CHAR(5) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	num_civico INTEGER NOT NULL,
	provincia VARCHAR(60) NOT NULL,
	anzianita INTEGER NOT NULL,
	
	CHECK(num_civico > 0 ),
	CHECK(anzianita > 0 ),
	CHECK(costo_orario > 0)
	
	

);

CREATE TABLE FILIALE(
	cod_f INTEGER PRIMARY KEY,
	costo_personale DECIMAL(15,3) NOT NULL,
	telefono VARCHAR(10) NOT NULL,
	via VARCHAR(60) NOT NULL,
	cap CHAR(5) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	num_civico INTEGER NOT NULL,
	provincia VARCHAR(60) NOT NULL,
	cod_m INTEGER NOT NULL,
	FOREIGN  KEY (cod_m) REFERENCES MAGAZZINO(cod_m)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(num_civico > 0),
	CHECK(costo_personale >= 0)


);

CREATE TABLE DIRIGE(
	cod_f INTEGER PRIMARY KEY,
	cf_dir CHAR(16) NOT NULL,
	UNIQUE(cf_dir),
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cf_dir) REFERENCES DIRIGENTE(cf)
	ON DELETE CASCADE ON UPDATE CASCADE


);

CREATE TABLE DIPENDENTE(
	cf CHAR(16) PRIMARY KEY,
	nome VARCHAR(60) NOT NULL,
	cognome VARCHAR(60) NOT NULL,
	costo_orario DECIMAL(10,3) NOT NULL,
	telefono VARCHAR(10),
	via VARCHAR(60) NOT NULL,
	cap CHAR(5) NOT NULL,
	citta VARCHAR(60) NOT NULL,
	num_civico INTEGER NOT NULL,
	provincia VARCHAR(60) NOT NULL,
	cod_f INTEGER NOT NULL,
	
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(num_civico > 0 ),
	CHECK(costo_orario > 0)
	
	

);


CREATE TABLE RIFORNIMENTO(
	cod_fornitore INTEGER NOT NULL,
	cod_rifornisce INTEGER NOT NULL,
	PRIMARY KEY(cod_fornitore, cod_rifornisce),
	
	FOREIGN KEY (cod_fornitore) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_rifornisce) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE
	
);

CREATE TABLE EVENTO(
	nome VARCHAR(60)  NOT NULL,
	data DATE NOT NULL,
	localita VARCHAR(60) NOT NULL,
	cod_f INTEGER NOT NULL,
	
	PRIMARY KEY(nome, data),
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(LENGTH(localita) >= 2),
	CHECK(LENGTH(nome) >= 3)

);

CREATE TABLE ESPOSIZIONE(
	nome_cd VARCHAR(60) NOT NULL, 
	cod_band INTEGER NOT NULL, 
	cod_f INTEGER NOT NULL,
	quantita INTEGER,
	PRIMARY KEY(nome_cd, cod_band, cod_f),
	
	FOREIGN KEY (nome_cd, cod_band) REFERENCES CD_MUSICALE(nome, cod_band)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK (quantita >= 0)
	
);

CREATE TABLE CLIENTE(
	cf CHAR(16) PRIMARY KEY, 
	nome VARCHAR(60) NOT NULL, 
	cognome VARCHAR(60) NOT NULL, 
	telefono VARCHAR(10), 
	spesa_totale DECIMAL(10,3) NOT NULL
	

);

CREATE TABLE PRESTITO(
	data date NOT NULL,
	cf CHAR(16) NOT NULL,
	nome_cd VARCHAR(60) NOT NULL,
	cod_band INTEGER NOT NULL,
	costo DECIMAL (10,3) NOT NULL,
	cod_f INTEGER NOT NULL,
	PRIMARY KEY(cf, nome_cd, cod_band),
	
	FOREIGN KEY (nome_cd, cod_band) REFERENCES CD_MUSICALE(nome, cod_band)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cf) REFERENCES CLIENTE(cf)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(costo > 0)

);


CREATE TABLE BUONO_SCONTO(
	cod_b INTEGER PRIMARY KEY, 
	sconto DECIMAL(3,2), 
	valido BOOLEAN NOT NULL,

	
	CHECK(sconto <= 1)

);


CREATE TABLE CARRELLO(
	num INTEGER NOT NULL, 
	cf CHAR(16) NOT NULL, 
	data date NOT NULL, 
	importo_totale DECIMAL(10,3), 
	cod_b INTEGER NOT NULL,
	cod_f INTEGER NOT NULL,
	PRIMARY KEY(num, cf),
	
	FOREIGN KEY (cf) REFERENCES CLIENTE(cf)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_b) REFERENCES BUONO_SCONTO(cod_b)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (cod_f) REFERENCES FILIALE(cod_f)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(importo_totale > 0),
	CHECK(num > 0)

);



CREATE TABLE FA_PARTE(
	num INTEGER NOT NULL, 
	cf CHAR(16) NOT NULL, 
	nome_cd VARCHAR(60) NOT NULL, 
	cod_band INTEGER NOT NULL, 
	qta_copie INTEGER NOT NULL,
	PRIMARY KEY(num, cf, nome_cd, cod_band),
	
	FOREIGN KEY (num, cf) REFERENCES CARRELLO(num, cf)
	ON DELETE CASCADE ON UPDATE CASCADE,
	FOREIGN KEY (nome_cd, cod_band) REFERENCES CD_MUSICALE(nome, cod_band)
	ON DELETE CASCADE ON UPDATE CASCADE,
	
	CHECK(qta_copie > 0)


);
